type CourtConfig @entity {
  id: ID!
  currentTerm: BigInt
  termDuration: BigInt
  feeToken: Bytes
  jurorFee: BigInt
  draftFee: BigInt
  settleFee: BigInt
  evidenceTerms: BigInt
  commitTerms: BigInt
  revealTerms: BigInt
  appealTerms: BigInt
  appealConfirmationTerms: BigInt
  penaltyPct: Int
  finalRoundReduction: Int
  firstRoundJurorsNumber: BigInt
  appealStepFactor: BigInt
  maxRegularAppealRounds: BigInt
  finalRoundLockTerms: BigInt
  appealCollateralFactor: BigInt
  appealConfirmCollateralFactor: BigInt
  minActiveBalance: BigInt
  fundsGovernor: Bytes
  configGovernor: Bytes
  modulesGovernor: Bytes
  modules: [CourtModule!] @derivedFrom(field: "court")
}

type CourtModule @entity {
  id: ID!
  address: Bytes!
  court: CourtConfig!
}

type Dispute @entity {
  id: ID!
  subject: Arbitrable!
  createTermId: BigInt!
  possibleRulings: Int!
  finalRuling: Int!
  lastRoundId: BigInt!
  state: DisputeState!
  metadata: String!
  rounds: [AdjudicationRound!] @derivedFrom(field: "dispute")
  createdAt: BigInt!
}

enum DisputeState {
  PreDraft
  Adjudicating
  Ruled
}

type Arbitrable @entity {
  id: ID!
  disputes: [Dispute!] @derivedFrom(field: "subject")
  evidence: [Bytes!]
  createdAt: BigInt!
}

type AdjudicationRound @entity {
  id: ID!
  number: BigInt!
  dispute: Dispute!
  state: AdjudicationState!
  draftTermId: BigInt!
  jurorsNumber: BigInt!
  settledPenalties: Boolean!
  jurorFees: BigInt!
  jurors: [JurorDraft!] @derivedFrom(field: "round")
  delayedTerms: BigInt!
  selectedJurors: BigInt!
  coherentJurors: BigInt!
  settledJurors: BigInt!
  collectedTokens: BigInt!
  appeal: Appeal @derivedFrom(field: "round")
  createdAt: BigInt!
}

enum AdjudicationState {
  Invalid
  Committing
  Revealing
  Appealing
  ConfirmingAppeal
  Ended
}

type Appeal @entity {
  id: ID!
  round: AdjudicationRound!
  maker: Bytes!
  appealedRuling: BigInt!
  taker: Bytes!
  opposedRuling: BigInt!
  settled: Boolean!
  createdAt: BigInt!
}

type Juror @entity {
  id: ID!
  activeBalance: BigInt!
  lockedBalance: BigInt!
  availableBalance: BigInt!
  deactivationBalance: BigInt!
  withdrawalsLockTermId: BigInt!
  drafts: [JurorDraft!] @derivedFrom(field: "juror")
  movements: [ANJMovement!] @derivedFrom(field: "juror")
  createdAt: BigInt!
}

type JurorDraft @entity {
  id: ID!
  round: AdjudicationRound!
  juror: Juror!
  weight: BigInt!
  locked: BigInt!
  rewarded: Boolean!
  createdAt: BigInt!
}

type ANJMovement @entity {
  id: ID!
  juror: Juror!
  type: ANJMovementType!
  amount: BigInt!
  effectiveTermId: BigInt
  createdAt: BigInt!
}

enum ANJMovementType {
  Stake
  Unstake
  Activation
  Deactivation
  Lock
  Unlock
  Reward
  Slash
}

type ANJBalance @entity {
  id: ID!
  owner: Bytes!
  amount: BigInt!
}

type ANJTransfer @entity {
  id: ID!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
}
